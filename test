const Manager = require("./lib/Manager");
const Engineer = require("./lib/Engineer");
const Intern = require("./lib/Intern");
const inquirer = require("inquirer");
const path = require("path");
const fs = require("fs");
const OUTPUT_DIR = path.resolve(__dirname, "output")
const outputPath = path.join(OUTPUT_DIR, "team.html");
​
const render = require("./lib/htmlRenderer");
​

// Write code to use inquirer to gather information about the development team members,
// and to create objects for each team member (using the correct classes as blueprints!)
// import inquirer using npm and this will be responsible for taking in user input that will call our store methods

// declare a Class named User (whoever is running the program)
///class User {
class User {
 constructor(name, id, email, role, officeNumber, github, school) {
 //   this.store = store;
 //   this.feedbackArray = [];


  // declare a method called initActions
  // this method/question will be responsible for asking the user to pick a role
  // initActions(){
  console.log(`Please pick a role ${this.store.name}! \n`)
    inquirer
    .prompt([
      {
        type: "rawlist",
        message: "What is your role?",
        name: "employee",
        choices: [
          'Manager',
          'Engineer',
          'Intern',
        ]
      },
    ])
    // utilize object deconstruction to deconstruct the action key from the response object that comes back from the inquirer prompt
    .then(({ employee }) => {
      // do something action
      switch (employee) {
        case 'Manager':
          // ask for name, id, email, office number
          ManagerPrompt();
          break;
      //   case 'Engineer':
      //     EngineerPrompt();
      //     break;
      //   case 'Intern':
      //     this.conductTransactionPrompt();
      //     break;
      //   case 'Print Revenue':
      //     this.printRevenue();
      //     break;
      //   default:
      //     process.exit();
      //     break;
      }
    });
 }
};

​
// After the user has input all employees desired, call the `render` function (required
// above) and pass in an array containing all employee objects; the `render` function will
// generate and return a block of HTML including templated divs for each employee!
​
// After you have your html, you're now ready to create an HTML file using the HTML
// returned from the `render` function. Now write it to a file named `team.html` in the
// `output` folder. You can use the variable `outputPath` above target this location.
// Hint: you may need to check if the `output` folder exists and create it if it
// does not.
​
// HINT: each employee type (manager, engineer, or intern) has slightly different
// information; write your code to ask different questions via inquirer depending on
// employee type.
​
// HINT: make sure to build out your classes first! Remember that your Manager, Engineer,
// and Intern classes should all extend from a class named Employee; see the directions
// for further information. Be sure to test out each class and verify it generates an 
// object with the correct structure and methods. This structure will be crucial in order
// for the provided `render` function to work!```
